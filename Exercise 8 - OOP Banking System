import random
from datetime import datetime


class Transaction:
    def __init__(self, amount, transaction_type):
        self.date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.amount = amount
        self.transaction_type = transaction_type

    def __str__(self):
        return f"{self.date} - {self.transaction_type} - ${self.amount}"


def generate_account_number():
    """function to generate a random account number"""
    return random.randint(10000, 99999)


class BankAccount:
    def __init__(self, account_holder):
        self.account_number = generate_account_number()
        self.account_holder = account_holder
        self.balance = 0
        self.transactions = []

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposited ${amount}. new balance: ${self.balance}")
            self.transactions.append(Transaction(amount, "Deposit"))
        else:
            print("Deposit amount must be positive")

    def withdraw(self, amount):
        if 0 < amount <= self.balance:
            self.balance -= amount
            print(f"Withdrew ${amount}. new balance: ${self.balance}")
            self.transactions.append(Transaction(amount, "Withdrawal"))
        else:
            print("Insufficient balance or invalid withdrawal amount.")

    def display_details(self):
        print(f"Account Number: {self.account_number}, "
              f"Account Holder: {self.account_holder}, "
              f"Balance: {self.balance}")

    def print_transaction_history(self):
        print("Transaction History:")
        for transaction in self.transactions:
            print(transaction)


class SavingsAccount(BankAccount):
    def __init__(self, account_holder, minimum_balance):
        super().__init__(account_holder)
        self.minimum_balance = minimum_balance

    def withdraw(self, amount):
        if self.balance - amount < self.minimum_balance:
            print('Cannot withdraw, minimum balance requirement not met.')
        else:
            super().withdraw(amount)


class CheckingAccount(BankAccount):
    def __init__(self, account_holder):
        super().__init__(account_holder)
        self.checkbook_issued = False

    def issue_checkbook(self):
        if not self.checkbook_issued:
            self.checkbook_issued = True
            print("Checkbook issued")
        else:
            print("Checkbook already issued.")


frodo_savings = SavingsAccount("Frodo Baggins", 500)
frodo_savings.deposit(1000)
frodo_savings.withdraw(600)
frodo_savings.display_details()

print("-" * 50)

voldi_checking = CheckingAccount("Lord Voldemort")
voldi_checking.deposit(2000)
voldi_checking.issue_checkbook()
voldi_checking.withdraw(1500)
voldi_checking.display_details()
voldi_checking.issue_checkbook()

print("-" * 50)

harry_account = SavingsAccount("Harry Potter", 20)
harry_account.deposit(100)
harry_account.deposit(50)
harry_account.withdraw(75)
harry_account.display_details()
harry_account.print_transaction_history()

# bank_account1 = BankAccount("Michael")
# bank_account1.deposit(100)
# bank_account1.deposit(100)
# bank_account1.withdraw(50)
#
# print("-" * 50)
#
# bank_account2 = BankAccount("Kalen")
# bank_account2.deposit(500)
# bank_account2.deposit(-30)
# bank_account2.withdraw(10)
# bank_account2.withdraw(780)
#
# print("-" * 50)
#
# bank_account1.display_details()
# bank_account2.display_details()






